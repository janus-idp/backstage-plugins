#!/usr/bin/env node
/*
 * Copyright 2020 Spotify AB
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

const path = require('path');

// Figure out whether we're running inside the backstage repo or as an installed dependency
const isLocal = require('fs').existsSync(path.resolve(__dirname, '../src'));

// This is used for e2e-tests where we create a new app in a tmp folder
const isTemp = path.resolve(__dirname).includes(require('os').tmpdir());

if (!isLocal || isTemp || process.env.E2E) {
  // src-relative imports are a pain to get to work with plain tsc compilation, as the
  // transpiled code will maintain the imports as they are in the source. Which means an
  // import for `helpers/paths` will start like that in the output, which won't work in NodeJS.
  //
  // This is a solution for getting src-relative imports to work with typescript/node in
  // the published package. We're using `module: "amd"` to ship the entire cli implementation
  // in one file, and it also happens to generate correct module definition and import statements.
  // Minimal AMD implementation
  const moduleFactories = {};
  const moduleCache = {};
  global.define = (name, deps, moduleFunc) => {
    moduleFactories[name] = () => {
      const exportsObj = {};

      // require() that first searches for locally defined amd modules
      const requireFunc = name => {
        let factory = moduleFactories[name];
        if (!factory) {
          // Check /index as well, to mirror nodejs resolution
          const index = `${name}/index`;
          if (!moduleFactories[index]) {
            return require(name);
          }
          name = index;
          factory = moduleFactories[name];
        }
        if (!moduleCache[name]) {
          moduleCache[name] = factory();
        }
        return moduleCache[name];
      };
      const impls = deps.slice(2).map(requireFunc);

      moduleFunc(requireFunc, exportsObj, ...impls);

      return exportsObj;
    };
  };
  require('../dist');

  // index module is the entrypoint
  moduleFactories.index();
} else {
  const tsConfigPath = path.resolve(__dirname, '../tsconfig.json');
  const {
    baseUrl: relativeBaseUrl,
    paths = {},
  } = require(tsConfigPath).compilerOptions;
  const baseUrl = path.resolve(__dirname, '..', relativeBaseUrl);

  // Use tsconfig-paths to resolve src-relative paths during development
  const cleanupPaths = require('tsconfig-paths').register({ baseUrl, paths });

  require('ts-node').register({
    project: path.resolve(__dirname, '../tsconfig.json'),
    compilerOptions: {
      module: 'CommonJS',
    },
    transpileOnly: true,
  });

  require('../src');

  cleanupPaths();
}
