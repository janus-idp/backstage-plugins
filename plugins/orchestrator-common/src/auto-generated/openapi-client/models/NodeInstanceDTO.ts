// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Orchestrator plugin
 * API to interact with orchestrator plugin
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';

/**
 *
 * @export
 * @interface NodeInstanceDTO
 */
export interface NodeInstanceDTO {
  /**
   * Type name
   * @type {string}
   * @memberof NodeInstanceDTO
   */
  typename?: string;
  /**
   * Node instance ID
   * @type {string}
   * @memberof NodeInstanceDTO
   */
  id?: string;
  /**
   * Node name
   * @type {string}
   * @memberof NodeInstanceDTO
   */
  name?: string;
  /**
   * Node type
   * @type {string}
   * @memberof NodeInstanceDTO
   */
  type?: string;
  /**
   * Date when the node was entered
   * @type {Date}
   * @memberof NodeInstanceDTO
   */
  enter?: Date;
  /**
   * Date when the node was exited (optional)
   * @type {Date}
   * @memberof NodeInstanceDTO
   */
  exit?: Date;
  /**
   * Definition ID
   * @type {string}
   * @memberof NodeInstanceDTO
   */
  definitionId?: string;
  /**
   * Node ID
   * @type {string}
   * @memberof NodeInstanceDTO
   */
  nodeId?: string;
}

/**
 * Check if a given object implements the NodeInstanceDTO interface.
 */
export function instanceOfNodeInstanceDTO(value: object): boolean {
  let isInstance = true;

  return isInstance;
}

export function NodeInstanceDTOFromJSON(json: any): NodeInstanceDTO {
  return NodeInstanceDTOFromJSONTyped(json, false);
}

export function NodeInstanceDTOFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): NodeInstanceDTO {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    typename: !exists(json, '__typename') ? undefined : json['__typename'],
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    type: !exists(json, 'type') ? undefined : json['type'],
    enter: !exists(json, 'enter') ? undefined : new Date(json['enter']),
    exit: !exists(json, 'exit') ? undefined : new Date(json['exit']),
    definitionId: !exists(json, 'definitionId')
      ? undefined
      : json['definitionId'],
    nodeId: !exists(json, 'nodeId') ? undefined : json['nodeId'],
  };
}

export function NodeInstanceDTOToJSON(value?: NodeInstanceDTO | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    __typename: value.typename,
    id: value.id,
    name: value.name,
    type: value.type,
    enter: value.enter === undefined ? undefined : value.enter.toISOString(),
    exit: value.exit === undefined ? undefined : value.exit.toISOString(),
    definitionId: value.definitionId,
    nodeId: value.nodeId,
  };
}
