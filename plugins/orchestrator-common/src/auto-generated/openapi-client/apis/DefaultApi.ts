// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Orchestrator plugin
 * API to interact with orchestrator plugin
 *
 * The version of the OpenAPI document: 0.0.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type {
  CreateWorkflow201Response,
  CreateWorkflowRequest,
  ExecuteWorkflowRequestDTO,
  ExecuteWorkflowResponseDTO,
  ProcessInstanceDTO,
  WorkflowDataDTO,
  WorkflowListResultDTO,
  WorkflowOverviewDTO,
  WorkflowOverviewListResultDTO,
  WorkflowRunStatusDTO,
  WorkflowSpecFileDTO,
} from '../models/index';
import {
  CreateWorkflow201ResponseFromJSON,
  CreateWorkflow201ResponseToJSON,
  CreateWorkflowRequestFromJSON,
  CreateWorkflowRequestToJSON,
  ExecuteWorkflowRequestDTOFromJSON,
  ExecuteWorkflowRequestDTOToJSON,
  ExecuteWorkflowResponseDTOFromJSON,
  ExecuteWorkflowResponseDTOToJSON,
  ProcessInstanceDTOFromJSON,
  ProcessInstanceDTOToJSON,
  WorkflowDataDTOFromJSON,
  WorkflowDataDTOToJSON,
  WorkflowListResultDTOFromJSON,
  WorkflowListResultDTOToJSON,
  WorkflowOverviewDTOFromJSON,
  WorkflowOverviewDTOToJSON,
  WorkflowOverviewListResultDTOFromJSON,
  WorkflowOverviewListResultDTOToJSON,
  WorkflowRunStatusDTOFromJSON,
  WorkflowRunStatusDTOToJSON,
  WorkflowSpecFileDTOFromJSON,
  WorkflowSpecFileDTOToJSON,
} from '../models/index';
import * as runtime from '../runtime';

export interface AbortWorkflowRequest {
  workflowId: string;
}

export interface CreateWorkflowOperationRequest {
  createWorkflowRequest: CreateWorkflowRequest;
  uri?: string;
}

export interface ExecuteWorkflowRequest {
  workflowId: string;
  executeWorkflowRequestDTO: ExecuteWorkflowRequestDTO;
}

export interface GetInstanceByIdRequest {
  instanceId: string;
}

export interface GetWorkflowOverviewByIdRequest {
  workflowId: string;
}

export interface GetWorkflowResultsRequest {
  instanceId: string;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * Aborts a workflow instance identified by the provided workflowId.
   * Abort a workflow instance
   */
  async abortWorkflowRaw(
    requestParameters: AbortWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<string>> {
    if (
      requestParameters.workflowId === null ||
      requestParameters.workflowId === undefined
    ) {
      throw new runtime.RequiredError(
        'workflowId',
        'Required parameter requestParameters.workflowId was null or undefined when calling abortWorkflow.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/workflows/{workflowId}/abort`.replace(
          `{${'workflowId'}}`,
          encodeURIComponent(String(requestParameters.workflowId)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<string>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Aborts a workflow instance identified by the provided workflowId.
   * Abort a workflow instance
   */
  async abortWorkflow(
    requestParameters: AbortWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<string> {
    const response = await this.abortWorkflowRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Create or update a workflow
   */
  async createWorkflowRaw(
    requestParameters: CreateWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<CreateWorkflow201Response>> {
    if (
      requestParameters.createWorkflowRequest === null ||
      requestParameters.createWorkflowRequest === undefined
    ) {
      throw new runtime.RequiredError(
        'createWorkflowRequest',
        'Required parameter requestParameters.createWorkflowRequest was null or undefined when calling createWorkflow.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.uri !== undefined) {
      queryParameters['uri'] = requestParameters.uri;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v2/workflows`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateWorkflowRequestToJSON(
          requestParameters.createWorkflowRequest,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      CreateWorkflow201ResponseFromJSON(jsonValue),
    );
  }

  /**
   * Create or update a workflow
   */
  async createWorkflow(
    requestParameters: CreateWorkflowOperationRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<CreateWorkflow201Response> {
    const response = await this.createWorkflowRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Execute a workflow
   */
  async executeWorkflowRaw(
    requestParameters: ExecuteWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ExecuteWorkflowResponseDTO>> {
    if (
      requestParameters.workflowId === null ||
      requestParameters.workflowId === undefined
    ) {
      throw new runtime.RequiredError(
        'workflowId',
        'Required parameter requestParameters.workflowId was null or undefined when calling executeWorkflow.',
      );
    }

    if (
      requestParameters.executeWorkflowRequestDTO === null ||
      requestParameters.executeWorkflowRequestDTO === undefined
    ) {
      throw new runtime.RequiredError(
        'executeWorkflowRequestDTO',
        'Required parameter requestParameters.executeWorkflowRequestDTO was null or undefined when calling executeWorkflow.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/v2/workflows/{workflowId}/execute`.replace(
          `{${'workflowId'}}`,
          encodeURIComponent(String(requestParameters.workflowId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ExecuteWorkflowRequestDTOToJSON(
          requestParameters.executeWorkflowRequestDTO,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ExecuteWorkflowResponseDTOFromJSON(jsonValue),
    );
  }

  /**
   * Execute a workflow
   */
  async executeWorkflow(
    requestParameters: ExecuteWorkflowRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ExecuteWorkflowResponseDTO> {
    const response = await this.executeWorkflowRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get Workflow Instance by ID
   */
  async getInstanceByIdRaw(
    requestParameters: GetInstanceByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<ProcessInstanceDTO>> {
    if (
      requestParameters.instanceId === null ||
      requestParameters.instanceId === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceId',
        'Required parameter requestParameters.instanceId was null or undefined when calling getInstanceById.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/workflows/instances/{instanceId}`.replace(
          `{${'instanceId'}}`,
          encodeURIComponent(String(requestParameters.instanceId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ProcessInstanceDTOFromJSON(jsonValue),
    );
  }

  /**
   * Get Workflow Instance by ID
   */
  async getInstanceById(
    requestParameters: GetInstanceByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<ProcessInstanceDTO> {
    const response = await this.getInstanceByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Retrieve an array of instances
   * Get instances
   */
  async getInstancesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<ProcessInstanceDTO>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/workflows/instances`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(ProcessInstanceDTOFromJSON),
    );
  }

  /**
   * Retrieve an array of instances
   * Get instances
   */
  async getInstances(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<ProcessInstanceDTO>> {
    const response = await this.getInstancesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a workflow overview by ID
   */
  async getWorkflowOverviewByIdRaw(
    requestParameters: GetWorkflowOverviewByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkflowOverviewDTO>> {
    if (
      requestParameters.workflowId === null ||
      requestParameters.workflowId === undefined
    ) {
      throw new runtime.RequiredError(
        'workflowId',
        'Required parameter requestParameters.workflowId was null or undefined when calling getWorkflowOverviewById.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/workflows/{workflowId}/overview`.replace(
          `{${'workflowId'}}`,
          encodeURIComponent(String(requestParameters.workflowId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      WorkflowOverviewDTOFromJSON(jsonValue),
    );
  }

  /**
   * Get a workflow overview by ID
   */
  async getWorkflowOverviewById(
    requestParameters: GetWorkflowOverviewByIdRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkflowOverviewDTO> {
    const response = await this.getWorkflowOverviewByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get workflow results
   */
  async getWorkflowResultsRaw(
    requestParameters: GetWorkflowResultsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkflowDataDTO>> {
    if (
      requestParameters.instanceId === null ||
      requestParameters.instanceId === undefined
    ) {
      throw new runtime.RequiredError(
        'instanceId',
        'Required parameter requestParameters.instanceId was null or undefined when calling getWorkflowResults.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/workflows/instances/{instanceId}/results`.replace(
          `{${'instanceId'}}`,
          encodeURIComponent(String(requestParameters.instanceId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      WorkflowDataDTOFromJSON(jsonValue),
    );
  }

  /**
   * Get workflow results
   */
  async getWorkflowResults(
    requestParameters: GetWorkflowResultsRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkflowDataDTO> {
    const response = await this.getWorkflowResultsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   * Get workflow specifications
   */
  async getWorkflowSpecsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<WorkflowSpecFileDTO>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/specs`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(WorkflowSpecFileDTOFromJSON),
    );
  }

  /**
   * Get workflow specifications
   */
  async getWorkflowSpecs(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<WorkflowSpecFileDTO>> {
    const response = await this.getWorkflowSpecsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Retrieve an array of workflow statuses
   * Get workflow status list
   */
  async getWorkflowStatusesRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<Array<WorkflowRunStatusDTO>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/workflows/instances/statuses`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(WorkflowRunStatusDTOFromJSON),
    );
  }

  /**
   * Retrieve an array of workflow statuses
   * Get workflow status list
   */
  async getWorkflowStatuses(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<Array<WorkflowRunStatusDTO>> {
    const response = await this.getWorkflowStatusesRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a list of workflow
   */
  async getWorkflowsRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkflowListResultDTO>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/workflows`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      WorkflowListResultDTOFromJSON(jsonValue),
    );
  }

  /**
   * Get a list of workflow
   */
  async getWorkflows(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkflowListResultDTO> {
    const response = await this.getWorkflowsRaw(initOverrides);
    return await response.value();
  }

  /**
   * Get a list of workflow overviews
   */
  async getWorkflowsOverviewRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<WorkflowOverviewListResultDTO>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/v2/workflows/overview`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      WorkflowOverviewListResultDTOFromJSON(jsonValue),
    );
  }

  /**
   * Get a list of workflow overviews
   */
  async getWorkflowsOverview(
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<WorkflowOverviewListResultDTO> {
    const response = await this.getWorkflowsOverviewRaw(initOverrides);
    return await response.value();
  }
}
