/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v2/workflows/overview': {
    /** @description Get a list of workflow overviews */
    get: operations['getWorkflowsOverview'];
  };
  '/v2/workflows/{workflowId}/overview': {
    /** @description Get a workflow overview by ID */
    get: operations['getWorkflowOverviewById'];
  };
  '/v2/workflows': {
    /** @description Get a list of workflow */
    get: operations['getWorkflows'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    WorkflowOverviewListResultDTO: {
      overviews?: components['schemas']['WorkflowOverviewDTO'][];
      paginationInfo?: components['schemas']['PaginationInfoDTO'];
    };
    WorkflowOverviewDTO: {
      /** @description Workflow unique identifier */
      workflowId?: string;
      /** @description Workflow name */
      name?: string;
      uri?: string;
      lastTriggeredMs?: number;
      lastRunStatus?: string;
      category?: components['schemas']['WorkflowCategoryDTO'];
      avgDurationMs?: number;
      description?: string;
    };
    PaginationInfoDTO: {
      limit?: number;
      offset?: number;
      totalCount?: number;
    };
    /**
     * @description Category of the workflow
     * @enum {string}
     */
    WorkflowCategoryDTO: 'assessment' | 'infrastructure';
    WorkflowListResultDTO: {
      items: components['schemas']['WorkflowDTO'][];
      paginationInfo: components['schemas']['PaginationInfoDTO'];
    };
    WorkflowDTO: {
      /** @description Workflow unique identifier */
      id: string;
      /** @description Workflow name */
      name?: string;
      /** @description URI of the workflow definition */
      uri: string;
      category: components['schemas']['WorkflowCategoryDTO'];
      /** @description Description of the workflow */
      description?: string;
      annotations?: string[];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /** @description Get a list of workflow overviews */
  getWorkflowsOverview: {
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['WorkflowOverviewListResultDTO'];
        };
      };
      /** @description Error fetching workflow overviews */
      500: {
        content: {
          'text/plain': string;
        };
      };
    };
  };
  /** @description Get a workflow overview by ID */
  getWorkflowOverviewById: {
    parameters: {
      path: {
        /** @description Unique identifier of the workflow */
        workflowId: string;
      };
    };
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['WorkflowOverviewDTO'];
        };
      };
      /** @description Error fetching workflow overview */
      500: {
        content: {
          'text/plain': string;
        };
      };
    };
  };
  /** @description Get a list of workflow */
  getWorkflows: {
    responses: {
      /** @description Success */
      200: {
        content: {
          'application/json': components['schemas']['WorkflowListResultDTO'];
        };
      };
      /** @description Error fetching workflow list */
      500: {
        content: {
          'text/plain': string;
        };
      };
    };
  };
}
