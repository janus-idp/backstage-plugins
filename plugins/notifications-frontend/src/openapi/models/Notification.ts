// @ts-nocheck
/* tslint:disable */
/* eslint-disable */
/**
 * Notifications Plugin - OpenAPI Specs
 * Notifications Plugin - OpenAPI Specs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Action } from './Action';
import { ActionFromJSON, ActionFromJSONTyped, ActionToJSON } from './Action';

/**
 *
 * @export
 * @interface Notification
 */
export interface Notification {
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  id: string;
  /**
   *
   * @type {Date}
   * @memberof Notification
   */
  created: Date;
  /**
   *
   * @type {boolean}
   * @memberof Notification
   */
  readByUser: boolean;
  /**
   *
   * @type {boolean}
   * @memberof Notification
   */
  isSystem: boolean;
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  origin: string;
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  title: string;
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  message?: string;
  /**
   *
   * @type {string}
   * @memberof Notification
   */
  topic?: string;
  /**
   *
   * @type {Array<Action>}
   * @memberof Notification
   */
  actions: Array<Action>;
}

/**
 * Check if a given object implements the Notification interface.
 */
export function instanceOfNotification(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'id' in value;
  isInstance = isInstance && 'created' in value;
  isInstance = isInstance && 'readByUser' in value;
  isInstance = isInstance && 'isSystem' in value;
  isInstance = isInstance && 'origin' in value;
  isInstance = isInstance && 'title' in value;
  isInstance = isInstance && 'actions' in value;

  return isInstance;
}

export function NotificationFromJSON(json: any): Notification {
  return NotificationFromJSONTyped(json, false);
}

export function NotificationFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Notification {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json['id'],
    created: new Date(json['created']),
    readByUser: json['readByUser'],
    isSystem: json['isSystem'],
    origin: json['origin'],
    title: json['title'],
    message: !exists(json, 'message') ? undefined : json['message'],
    topic: !exists(json, 'topic') ? undefined : json['topic'],
    actions: (json['actions'] as Array<any>).map(ActionFromJSON),
  };
}

export function NotificationToJSON(value?: Notification | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    created: value.created.toISOString(),
    readByUser: value.readByUser,
    isSystem: value.isSystem,
    origin: value.origin,
    title: value.title,
    message: value.message,
    topic: value.topic,
    actions: (value.actions as Array<any>).map(ActionToJSON),
  };
}
