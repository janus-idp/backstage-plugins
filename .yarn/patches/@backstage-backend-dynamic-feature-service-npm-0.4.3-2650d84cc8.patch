diff --git a/dist/features/features.cjs.js b/dist/features/features.cjs.js
index debb6ce817c7aa0111a3cbc20edeee815ad59759..cea4f6fde4c4c57793db5f9732d6810bdd517256 100644
--- a/dist/features/features.cjs.js
+++ b/dist/features/features.cjs.js
@@ -1,11 +1,11 @@
 'use strict';
 
 var backendPluginApi = require('@backstage/backend-plugin-api');
+var pluginManager = require('../manager/plugin-manager.cjs.js');
+var pluginScanner = require('../scanner/plugin-scanner.cjs.js');
 var schemas = require('../schemas/schemas.cjs.js');
 var frontend = require('../schemas/frontend.cjs.js');
 var rootLogger = require('../schemas/rootLogger.cjs.js');
-var pluginManager = require('../manager/plugin-manager.cjs.js');
-var pluginScanner = require('../scanner/plugin-scanner.cjs.js');
 
 const dynamicPluginsFeatureLoaderWithOptions = (options) => backendPluginApi.createBackendFeatureLoader({
   deps: {
@@ -13,13 +13,17 @@ const dynamicPluginsFeatureLoaderWithOptions = (options) => backendPluginApi.cre
   },
   *loader({ config }) {
     const dynamicPluginsEnabled = config.has(pluginScanner.configKey);
+    let rootLoggerOptions = {};
+    if (options?.logger) {
+      rootLoggerOptions = options.logger(config);
+    }
     yield* [
       schemas.dynamicPluginsSchemasServiceFactory(options),
       pluginManager.dynamicPluginsServiceFactory(options)
     ];
     if (dynamicPluginsEnabled) {
       yield* [
-        rootLogger.dynamicPluginsRootLoggerServiceFactory(options),
+        rootLogger.dynamicPluginsRootLoggerServiceFactory(rootLoggerOptions),
         frontend.dynamicPluginsFrontendSchemas,
         pluginManager.dynamicPluginsFeatureDiscoveryLoader
       ];
diff --git a/dist/features/features.cjs.js.map b/dist/features/features.cjs.js.map
index 4c36851870462037a9c505eb5b20a7085499c734..400c3205835b46031d0f805140e9f5b2b19c397e 100644
--- a/dist/features/features.cjs.js.map
+++ b/dist/features/features.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"features.cjs.js","sources":["../../src/features/features.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createBackendFeatureLoader,\n} from '@backstage/backend-plugin-api';\nimport {\n  DynamicPluginsSchemasOptions,\n  dynamicPluginsFrontendSchemas,\n  dynamicPluginsRootLoggerServiceFactory,\n  dynamicPluginsSchemasServiceFactory,\n} from '../schemas';\nimport {\n  DynamicPluginsFactoryOptions,\n  dynamicPluginsFeatureDiscoveryLoader,\n  dynamicPluginsServiceFactory,\n} from '../manager';\nimport { DynamicPluginsRootLoggerFactoryOptions } from '../schemas';\nimport { configKey } from '../scanner/plugin-scanner';\n\n/**\n * @public\n */\nexport type DynamicPluginsFeatureLoaderOptions = DynamicPluginsFactoryOptions &\n  DynamicPluginsSchemasOptions &\n  DynamicPluginsRootLoggerFactoryOptions;\n\nconst dynamicPluginsFeatureLoaderWithOptions = (\n  options?: DynamicPluginsFeatureLoaderOptions,\n) =>\n  createBackendFeatureLoader({\n    deps: {\n      config: coreServices.rootConfig,\n    },\n    *loader({ config }) {\n      const dynamicPluginsEnabled = config.has(configKey);\n\n      yield* [\n        dynamicPluginsSchemasServiceFactory(options),\n        dynamicPluginsServiceFactory(options),\n      ];\n      if (dynamicPluginsEnabled) {\n        yield* [\n          dynamicPluginsRootLoggerServiceFactory(options),\n          dynamicPluginsFrontendSchemas,\n          dynamicPluginsFeatureDiscoveryLoader,\n        ];\n      }\n    },\n  });\n\n/**\n * A backend feature loader that fully enable backend dynamic plugins.\n * More precisely it:\n * - adds the dynamic plugins root service (typically depended upon by plugins),\n * - adds additional required features to allow supporting dynamic plugins config schemas\n *   in the frontend application and the backend root logger,\n * - uses the dynamic plugins service to discover and expose dynamic plugins as features.\n *\n * @public\n *\n * @example\n * Using the `dynamicPluginsFeatureLoader` loader in a backend instance:\n * ```ts\n * //...\n * import { createBackend } from '@backstage/backend-defaults';\n * import { dynamicPluginsFeatureLoader } from '@backstage/backend-dynamic-feature-service';\n *\n * const backend = createBackend();\n * backend.add(dynamicPluginsFeatureLoader);\n * //...\n * backend.start();\n * ```\n *\n * @example\n * Passing options to the `dynamicPluginsFeatureLoader` loader in a backend instance:\n * ```ts\n * //...\n * import { createBackend } from '@backstage/backend-defaults';\n * import { dynamicPluginsFeatureLoader } from '@backstage/backend-dynamic-feature-service';\n * import { myCustomModuleLoader } from './myCustomModuleLoader';\n * import { myCustomSchemaLocator } from './myCustomSchemaLocator';\n *\n * const backend = createBackend();\n * backend.add(dynamicPluginsFeatureLoader({\n *   moduleLoader: myCustomModuleLoader,\n *   schemaLocator: myCustomSchemaLocator,\n *\n * }));\n * //...\n * backend.start();\n * ```\n */\nexport const dynamicPluginsFeatureLoader = Object.assign(\n  dynamicPluginsFeatureLoaderWithOptions,\n  dynamicPluginsFeatureLoaderWithOptions(),\n);\n"],"names":["createBackendFeatureLoader","coreServices","configKey","dynamicPluginsSchemasServiceFactory","dynamicPluginsServiceFactory","dynamicPluginsRootLoggerServiceFactory","dynamicPluginsFrontendSchemas","dynamicPluginsFeatureDiscoveryLoader"],"mappings":";;;;;;;;;AAyCA,MAAM,sCAAA,GAAyC,CAC7C,OAAA,KAEAA,2CAA2B,CAAA;AAAA,EACzB,IAAM,EAAA;AAAA,IACJ,QAAQC,6BAAa,CAAA,UAAA;AAAA,GACvB;AAAA,EACA,CAAC,MAAA,CAAO,EAAE,MAAA,EAAU,EAAA;AAClB,IAAM,MAAA,qBAAA,GAAwB,MAAO,CAAA,GAAA,CAAIC,uBAAS,CAAA,CAAA;AAElD,IAAO,OAAA;AAAA,MACLC,4CAAoC,OAAO,CAAA;AAAA,MAC3CC,2CAA6B,OAAO,CAAA;AAAA,KACtC,CAAA;AACA,IAAA,IAAI,qBAAuB,EAAA;AACzB,MAAO,OAAA;AAAA,QACLC,kDAAuC,OAAO,CAAA;AAAA,QAC9CC,sCAAA;AAAA,QACAC,kDAAA;AAAA,OACF,CAAA;AAAA,KACF;AAAA,GACF;AACF,CAAC,CAAA,CAAA;AA4CI,MAAM,8BAA8B,MAAO,CAAA,MAAA;AAAA,EAChD,sCAAA;AAAA,EACA,sCAAuC,EAAA;AACzC;;;;"}
\ No newline at end of file
+{"version":3,"file":"features.cjs.js","sources":["../../src/features/features.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  coreServices,\n  createBackendFeatureLoader,\n} from '@backstage/backend-plugin-api';\nimport type { Config } from '@backstage/config';\nimport {\n  DynamicPluginsFactoryOptions,\n  dynamicPluginsFeatureDiscoveryLoader,\n  dynamicPluginsServiceFactory,\n} from '../manager';\nimport { configKey } from '../scanner/plugin-scanner';\nimport {\n  DynamicPluginsRootLoggerFactoryOptions,\n  DynamicPluginsSchemasOptions,\n  dynamicPluginsFrontendSchemas,\n  dynamicPluginsRootLoggerServiceFactory,\n  dynamicPluginsSchemasServiceFactory,\n} from '../schemas';\n\n/**\n * @public\n */\nexport type DynamicPluginsFeatureLoaderOptions = DynamicPluginsFactoryOptions &\n  DynamicPluginsSchemasOptions &\n{ logger?: (config?: Config) => DynamicPluginsRootLoggerFactoryOptions };\n\nconst dynamicPluginsFeatureLoaderWithOptions = (\n  options?: DynamicPluginsFeatureLoaderOptions,\n) =>\n  createBackendFeatureLoader({\n    deps: {\n      config: coreServices.rootConfig,\n    },\n    *loader({ config }) {\n      const dynamicPluginsEnabled = config.has(configKey);\n\n      let rootLoggerOptions: DynamicPluginsRootLoggerFactoryOptions = {}\n      if (options?.logger) {\n        rootLoggerOptions = options.logger(config)\n      }\n\n      yield* [\n        dynamicPluginsSchemasServiceFactory(options),\n        dynamicPluginsServiceFactory(options),\n      ];\n      if (dynamicPluginsEnabled) {\n        yield* [\n          dynamicPluginsRootLoggerServiceFactory(rootLoggerOptions),\n          dynamicPluginsFrontendSchemas,\n          dynamicPluginsFeatureDiscoveryLoader,\n        ];\n      }\n    },\n  });\n\n/**\n * A backend feature loader that fully enable backend dynamic plugins.\n * More precisely it:\n * - adds the dynamic plugins root service (typically depended upon by plugins),\n * - adds additional required features to allow supporting dynamic plugins config schemas\n *   in the frontend application and the backend root logger,\n * - uses the dynamic plugins service to discover and expose dynamic plugins as features.\n *\n * @public\n *\n * @example\n * Using the `dynamicPluginsFeatureLoader` loader in a backend instance:\n * ```ts\n * //...\n * import { createBackend } from '@backstage/backend-defaults';\n * import { dynamicPluginsFeatureLoader } from '@backstage/backend-dynamic-feature-service';\n *\n * const backend = createBackend();\n * backend.add(dynamicPluginsFeatureLoader);\n * //...\n * backend.start();\n * ```\n *\n * @example\n * Passing options to the `dynamicPluginsFeatureLoader` loader in a backend instance:\n * ```ts\n * //...\n * import { createBackend } from '@backstage/backend-defaults';\n * import { dynamicPluginsFeatureLoader } from '@backstage/backend-dynamic-feature-service';\n * import { myCustomModuleLoader } from './myCustomModuleLoader';\n * import { myCustomSchemaLocator } from './myCustomSchemaLocator';\n *\n * const backend = createBackend();\n * backend.add(dynamicPluginsFeatureLoader({\n *   moduleLoader: myCustomModuleLoader,\n *   schemaLocator: myCustomSchemaLocator,\n *\n * }));\n * //...\n * backend.start();\n * ```\n */\nexport const dynamicPluginsFeatureLoader = Object.assign(\n  dynamicPluginsFeatureLoaderWithOptions,\n  dynamicPluginsFeatureLoaderWithOptions(),\n);\n"],"names":["createBackendFeatureLoader","coreServices","configKey","dynamicPluginsSchemasServiceFactory","dynamicPluginsServiceFactory","dynamicPluginsRootLoggerServiceFactory","dynamicPluginsFrontendSchemas","dynamicPluginsFeatureDiscoveryLoader"],"mappings":";;;;;;;;;AA0CA,MAAM,sCAAA,GAAyC,CAC7C,OAAA,KAEAA,2CAA2B,CAAA;AAAA,EACzB,IAAM,EAAA;AAAA,IACJ,QAAQC,6BAAa,CAAA,UAAA;AAAA,GACvB;AAAA,EACA,CAAC,MAAA,CAAO,EAAE,MAAA,EAAU,EAAA;AAClB,IAAM,MAAA,qBAAA,GAAwB,MAAO,CAAA,GAAA,CAAIC,uBAAS,CAAA,CAAA;AAElD,IAAA,IAAI,oBAA4D,EAAC,CAAA;AACjE,IAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,MAAoB,iBAAA,GAAA,OAAA,CAAQ,OAAO,MAAM,CAAA,CAAA;AAAA,KAC3C;AAEA,IAAO,OAAA;AAAA,MACLC,4CAAoC,OAAO,CAAA;AAAA,MAC3CC,2CAA6B,OAAO,CAAA;AAAA,KACtC,CAAA;AACA,IAAA,IAAI,qBAAuB,EAAA;AACzB,MAAO,OAAA;AAAA,QACLC,kDAAuC,iBAAiB,CAAA;AAAA,QACxDC,sCAAA;AAAA,QACAC,kDAAA;AAAA,OACF,CAAA;AAAA,KACF;AAAA,GACF;AACF,CAAC,CAAA,CAAA;AA4CI,MAAM,8BAA8B,MAAO,CAAA,MAAA;AAAA,EAChD,sCAAA;AAAA,EACA,sCAAuC,EAAA;AACzC;;;;"}
\ No newline at end of file
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 212ed98b995d33e38f428a108805a6a791bd948f..5af3e7734f58affdd574a4aef61363a8429ff194 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -276,7 +276,9 @@ declare const dynamicPluginsRootLoggerServiceFactory: ((options?: DynamicPlugins
 /**
  * @public
  */
-type DynamicPluginsFeatureLoaderOptions = DynamicPluginsFactoryOptions & DynamicPluginsSchemasOptions & DynamicPluginsRootLoggerFactoryOptions;
+type DynamicPluginsFeatureLoaderOptions = DynamicPluginsFactoryOptions & DynamicPluginsSchemasOptions & {
+    logger?: (config?: Config) => DynamicPluginsRootLoggerFactoryOptions;
+};
 /**
  * A backend feature loader that fully enable backend dynamic plugins.
  * More precisely it:
